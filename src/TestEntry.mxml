<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" minWidth="955" minHeight="600" 
			   xmlns:components="components.*" xmlns:services="services.*" xmlns:tests="tests.*"
			   creationComplete="init()">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<fx:Array id="validators">
			<mx:StringValidator required="true" source="{testSelect}" property="selectedValue"  requiredFieldError="Required"/>
			<mx:StringValidator required="true" source="{scheduleSelect}" property="selectedValue" requiredFieldError="Required"/>
			<components:DateRangeValidator id="dateTakenVal" source="{dateTakenInput}" property="text" 
										   start_date="{scheduleSelect.selectedItem.start_date}" end_date="{scheduleSelect.selectedItem.end_date}"/>
		</fx:Array>

	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import events.FlexXMLEvent;
			
			import mx.controls.Alert;
			import mx.controls.TextInput;
			import mx.core.FlexGlobals;
			import mx.events.AdvancedDataGridEvent;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			import mx.validators.Validator;
			
			import tests.ScoreEditor;
			import tests.ScoreRenderer; 
			private var _testId:String; 
			private var _schedSeq:String; 
			private var _dateTaken:String; 
			private var _currentTestId:String; 
			private var _currentSchedSeq:String; 
			private var _currentDateTaken:String;
			private var rowDir:int = 0; 
			private var colDir:int = 0; 
			private var confirmLoad:Boolean = false; 
			private var doSave:Boolean = false; 
			private var keySet:Boolean = false; 
			[Bindable] private var title:String; 
			[Bindable] private var groupId:String; 
		    [Bindable] private var curMeasure:XML; 
			
			/**
			 * testId
			 * This property reflects the current test id
			 * whenever it changes we need to load a new schedule based on the current values
			 */
			[Bindable]
			private function set testId(value:String):void { 
				_testId = value; 
				if (_testId && groupId) { 
					schedSvc.send({test_id:_testId, group_id:groupId})
				}
			}
			
			private function get testId():String { 
				return _testId; 
			}
			
			/**
			 * schedSeq
			 */ 
			[Bindable]
			private function set schedSeq(value:String):void { 
				_schedSeq = value; 
                infoSvc.send({group_id:groupId, test_id:_testId, seq: _schedSeq});  
				      
			}
			
			private function get schedSeq():String {
				return _schedSeq; 
			}
			

			
			/**
			 * Date Taken
			 * Although based on the schedule the date taken field is required to determine
			 * the mininum dates that an assessment is good for.   The date taken whenever we change it
			 * we need to make sure that we get a new score set. 
			 */ 
			[Bindable]
			private function set dateTaken(value:String):void {
				_dateTaken = value; 
			}
			
			private function get dateTaken():String { 
				return _dateTaken; 
			}
		
			
			public function init():void { 
			  groupId = FlexGlobals.topLevelApplication.parameters.group_id; 
			  testListSvc.send({group_id: groupId});
			  testId = FlexGlobals.topLevelApplication.parameters.test_id; 
			  schedSeq = FlexGlobals.topLevelApplication.parameters.seq; 
			  
			  //groupSvc.send({group_id: groupId}); 
			  testGrid.addEventListener(KeyboardEvent.KEY_DOWN, onKeyDown, true, 100); 
			  
			  
			}
			
			private function onKeyDown(event:KeyboardEvent):void { 
				colDir = 0; 
				rowDir = 0; 
				keySet = true; 
				if (event.keyCode == 9) {
					colDir = (event.shiftKey) ? -1: 1; 
					rowDir = 0; 
				}
				if (event.keyCode == 13) { 
					colDir = 0; 
					rowDir = 1; 
				}
			}
			

			private function setTestData():void { 
			  // test comment to see if its working
		      if (groupSvc.xml) { 
				  if (testGrid.selectedIndex<0 &&  groupSvc.xml.row.length()) {
					  testGrid.selectedItem=0; 
				  }
			  }
			  if (groupSvc.xml && !confirmLoad && groupSvc.xml.row.(attribute('modified') =='*').length() > 0) { 
				  Alert.show('You have unsaved changes.  Save your scores before continuing?','Save data', Alert.YES + Alert.NO, this, confirmSave ); 
				  return; 
			  }
			  if (testId && schedSeq && dateTaken) {
				  var sx:XML = XML(testGrid.selectedItem);
				  _currentTestId = _testId; 
				  _currentSchedSeq = _schedSeq; 
				  _currentDateTaken = _dateTaken; 
				  groupSvc.send({
					  group_id: groupId,
					  test_id:testId,
					  seq: schedSeq, 
					  date_taken:dateTaken
				  }); 
				  confirmLoad = false; 
				    
			  }
		      
			}
			
			private function confirmSave(event:CloseEvent):void { 
				if (event.detail == Alert.YES) { 
					saveScores();
					
	
				}
				else { 
					confirmLoad = true; 
					setTestData(); 
				}
				
			}
						
			
			/**
			 * Custom item editor event handler that pushes the score from
			 * the item editor back into the XML
			 */ 
			private function saveScore(event:AdvancedDataGridEvent):void {
				// Disable copying data back to the control.
				event.preventDefault();
	            var editor:ScoreEditor = ScoreEditor(event.currentTarget.itemEditorInstance); 
				var s:String = editor.text
				
				// Get new label from editor.
				testGrid.editedItemRenderer.data.label = s;
				
				// Get new data from editor.
				testGrid.editedItemRenderer.data.data = s;
				
				// Save the score
				var score:XML = editor.scoreXML; 
				var exceedsMax:Boolean = false; 

				if (score) { 
					if (score.@score!=s) {
						var scores:XML = testGrid.selectedItem.scores[0]; 
						testGrid.selectedItem['@modified'] = '*'; 
					}
					score.@score = s; 
					// Set style to indicate the normal range for the test.
					if (s != '' && Number(s)>Number(score['@max_score'])) {
						exceedsMax = true; 
					}
					if(s == "") {
						score.@norm_score="";
					}
					else if(score.@l_4.toString() && Number(s) >= Number(score.@l_4))
					{
						score.@norm_score = "4.0"
					}
					else if (score.@l_3.toString() && Number(s) >= Number(score.@l_3)) { 
						score.@norm_score = "3.0"
					}
					else if (score.@l_2.toString() && Number(s) >= Number(score.@l_2)){
						score.@norm_score = "2.0"
					} else { 
						score.@norm_score = "1.0"
					}
				}
				
				// This section is used to reposition based on keypresses in the grid. 
				if (event.reason == 'newRow' || event.reason == 'newColumn') { 
					var r:int = testGrid.editedItemPosition.rowIndex; 
					var c:int = testGrid.editedItemPosition.columnIndex; 
					// Do columns first because we might need to change the row as well. 
					var maxCol:int = testGrid.columns.length - 1; 
					var maxRow:int = groupSvc.xml.children().length() - 1; 
			        var ccount:int = 0; 
					var isEditable:Boolean = false; 
					if (colDir != 0) { 
						while (ccount < testGrid.columns.length && !isEditable) { 
							c = c + colDir; 
							if (c < 0) { 
								rowDir = -1; 
								c = maxCol; 
							}
							if (c > maxCol) { 
								c=0; 
								rowDir = 1; 
							}
							ccount++; 
							isEditable = AdvancedDataGridColumn(testGrid.columns[c]).editable;  
						}
					}
					// Change row if we need to
					r = r + rowDir; 
					r = (r > maxRow) ? maxRow : r; 
					r = (r< 0) ? 0 : r; 
			
					testGrid.editedItemPosition = { columnIndex: c, rowIndex: r};			
				
				}
				
				// Close the cell editor.
				testGrid.destroyItemEditor(); 
				// Notify the list control to update its display.
				testGrid.dataProvider.itemUpdated(testGrid.editedItemRenderer);
			}
			
			private function saveScores():void { 
				var x:XML = new XML(<table/>); 
				var xl:XMLList = groupSvc.xml.row.(attribute('modified')=='*'); 
				var s:XML; 
				for each (var t:XML in xl) {
					s = t.scores[0]; 
					s['@student_id'] = t.student_id[0]; 
					// @TODO:  Need to get the right date.
					if (t.date_taken[0].toString()) { 
					  s['@date_taken'] = t.date_taken[0]; 
					} else {
					  s['@date_taken'] = _currentDateTaken; 
					}
					s['@test_id'] = _currentTestId; 
					s['@seq'] = _currentSchedSeq; 
					x.appendChild(s.copy()); 
				}
				doSave = true; 
				groupSvc.send({method:"saveScores", xml: x.toXMLString(), group_id: groupId,  
					test_id: testId, seq: schedSeq, date_taken: dateTaken});  
			}
			
			private function setCurMeasure(event:AdvancedDataGridEvent):void {
		
           		if (event.itemRenderer) {
					var r:ScoreEditor = ScoreEditor(event.itemRenderer); 
					// Save the score
					curMeasure = r.scoreXML; 
			  	} else {
					curMeasure = null; 
				}
			}
			
			private function onScoreSaveReturn():void { 
				if (doSave) { 
					doSave = false; 
				}
			}
			
			private function onSchedRcv(event:FlexXMLEvent):void {
				if (event.xml) {
				  //_schedSeq=event.xml.row[0].seq; 
				  //dateTaken=event.xml.row[0].start_date; 
	
				}
			}
			
		    private function onInfoSvcData(event:FlexXMLEvent):void { 
				if (event.xml) { 
					var x:XML = event.xml.row[0]; 
					if (x) { 
					  dateTaken = x.target_date; 
					  title = x.group_name + ' ' + x.year_label; 
					  if (groupSvc) this.setTestData(); 
					}
				}
			}
			
		]]>
	</fx:Script>
    <services:DataService id="infoSvc" defaultService="TestEntry" defaultMethod="info" preload="false" flexXMLChange="onInfoSvcData(event)"/> 
	<services:DataService id="groupSvc" defaultService="TestEntry" defaultMethod="groupMembers" showProgress="true" flexXMLChange="onScoreSaveReturn()"/> 
	<services:DataService id="testListSvc" defaultService="TestEntry" defaultMethod="tests" /> 
	<services:DataService id="schedSvc" defaultService="TestEntry" defaultMethod="schedules" flexXMLChange="onSchedRcv(event)"/>
	<services:FlexApp title="{title}"/> 
	<s:TitleWindow title="{title} Test Entry" height="100%" width="100%">
		<s:VGroup height="100%" paddingLeft="5" paddingRight="5" paddingTop="5" paddingBottom="5">
			
		<s:Form width="100%">
			<s:layout>
				<s:HorizontalLayout/>
			</s:layout>

         
			<s:FormItem width="33%" label="Test">
				
			  <components:BindingDropDown id="testSelect"  prompt="Select Test" XML="{testListSvc.xml.row}" dataField="test_id" labelField="name" 
										  selectedValue="@{testId}" enabled="false"
										   />

			</s:FormItem>	
            <s:FormItem width="33%" label="Schedule">
				
			  <components:BindingDropDown id="scheduleSelect" XML="{schedSvc.xml.row}" dataField="seq" labelField="label" defaultSelect="true"
									  selectedValue="@{schedSeq}" prompt="select" enabled="false"/>
			</s:FormItem>

		  <s:FormItem width="33%">
			  
			  <components:BindingDateInput id="dateTakenInput" editable="true" enabled="false" text="@{dateTaken}"/>
	      
		  </s:FormItem>	  

		</s:Form>
		<s:Form backgroundColor="#C8C7C7" width="100%">
			<s:layout>
				<s:HorizontalLayout/>
			</s:layout>
			<s:FormItem label="Minimum:">
				<s:Label text="{curMeasure.@l_1}" width="50"/> 
			</s:FormItem>
			<s:FormItem label="Below Expectations:">
				<s:Label text="{curMeasure.@l_2}" width="50"/> 
			</s:FormItem>
			<s:FormItem label="Meets Expectations: ">
				<s:Label text="{curMeasure.@l_3}" width="50"/> 
			</s:FormItem>
			<s:FormItem label="Exceeds Expectations: ">
				<s:Label text="{curMeasure.@l_4}" width="50"/> 
			</s:FormItem>
			<s:FormItem label="Maximum:">
				<s:Label text="{curMeasure.@max_score}" width="50"/> 
			</s:FormItem>
		</s:Form>
	    <s:HGroup width="100%" height="100%" >
			<s:VGroup height="100%" width="100%">				
				<tests:TestScoresGrid id="testGrid" dataProvider="{groupSvc.xml.row}" height="100%" width="100%" itemEditEnd="saveScore(event)" itemEditBegin="setCurMeasure(event)" editable="item" measuresXML="{XML(testSelect.selectedItem).measures[0]}">
					<tests:groupedColumns>
						<mx:AdvancedDataGridColumn headerText="M" dataField="@modified" editable="false" width="20"/>
						<mx:AdvancedDataGridColumn headerText="First" dataField="first_name" editable="false" width="100"/>
						<mx:AdvancedDataGridColumn headerText="Last" dataField="last_name" editable="false"  width="150" />
						<mx:AdvancedDataGridColumn headerText="Gr" dataField="grade" width="40" editable="false"/> 
					</tests:groupedColumns>
				</tests:TestScoresGrid>
			</s:VGroup>
		</s:HGroup>
        <s:HGroup>
			<s:Button label = "Save Changes" click="saveScores()"/> 
		</s:HGroup>
	</s:VGroup>
		
	</s:TitleWindow>
</s:Application>
